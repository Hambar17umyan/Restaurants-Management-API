// <auto-generated />
using System;
using DAL.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250723162504_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.18");

            modelBuilder.Entity("DAL.Entities.AddressEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("Addresses");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("DAL.Entities.PlayerEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AlternateAddressId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DriverLicenseNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("OfficeAddressId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PrimaryAddressId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id")
                        .HasName("Players");

                    b.HasIndex("AlternateAddressId")
                        .IsUnique();

                    b.HasIndex("OfficeAddressId")
                        .IsUnique();

                    b.HasIndex("PrimaryAddressId")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("DAL.Entities.PlayerFavoriteRestaurantEntity", b =>
                {
                    b.Property<int?>("RestaurantId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RestaurantId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerFavoriteRestaurants");
                });

            modelBuilder.Entity("DAL.Entities.RestaurantEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AddressId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly?>("ClosingTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly?>("OpenningTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id")
                        .HasName("Restaurants");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("DAL.Entities.RestaurantMembershipEntity", b =>
                {
                    b.Property<int?>("RestaurantId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RestaurantId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("RestaurantMemberships");
                });

            modelBuilder.Entity("DAL.Entities.PlayerEntity", b =>
                {
                    b.HasOne("DAL.Entities.AddressEntity", "AlternateAddress")
                        .WithOne()
                        .HasForeignKey("DAL.Entities.PlayerEntity", "AlternateAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.AddressEntity", "OfficeAddress")
                        .WithOne()
                        .HasForeignKey("DAL.Entities.PlayerEntity", "OfficeAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.AddressEntity", "PrimaryAddress")
                        .WithOne()
                        .HasForeignKey("DAL.Entities.PlayerEntity", "PrimaryAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlternateAddress");

                    b.Navigation("OfficeAddress");

                    b.Navigation("PrimaryAddress");
                });

            modelBuilder.Entity("DAL.Entities.PlayerFavoriteRestaurantEntity", b =>
                {
                    b.HasOne("DAL.Entities.PlayerEntity", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.RestaurantEntity", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("DAL.Entities.RestaurantEntity", b =>
                {
                    b.HasOne("DAL.Entities.AddressEntity", "Address")
                        .WithOne()
                        .HasForeignKey("DAL.Entities.RestaurantEntity", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("DAL.Entities.RestaurantMembershipEntity", b =>
                {
                    b.HasOne("DAL.Entities.PlayerEntity", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.RestaurantEntity", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Restaurant");
                });
#pragma warning restore 612, 618
        }
    }
}
